// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package qlient

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// AddFaceDetectedAddFaceDetected includes the requested fields of the GraphQL type FaceDetected.
type AddFaceDetectedAddFaceDetected struct {
	FaceDetected bool `json:"faceDetected"`
}

// GetFaceDetected returns AddFaceDetectedAddFaceDetected.FaceDetected, and is useful for accessing the field via an interface.
func (v *AddFaceDetectedAddFaceDetected) GetFaceDetected() bool { return v.FaceDetected }

// AddFaceDetectedResponse is returned by AddFaceDetected on success.
type AddFaceDetectedResponse struct {
	AddFaceDetected AddFaceDetectedAddFaceDetected `json:"addFaceDetected"`
}

// GetAddFaceDetected returns AddFaceDetectedResponse.AddFaceDetected, and is useful for accessing the field via an interface.
func (v *AddFaceDetectedResponse) GetAddFaceDetected() AddFaceDetectedAddFaceDetected {
	return v.AddFaceDetected
}

// AddImageAddImage includes the requested fields of the GraphQL type Image.
type AddImageAddImage struct {
	Id       int    `json:"id"`
	Filename string `json:"filename"`
}

// GetId returns AddImageAddImage.Id, and is useful for accessing the field via an interface.
func (v *AddImageAddImage) GetId() int { return v.Id }

// GetFilename returns AddImageAddImage.Filename, and is useful for accessing the field via an interface.
func (v *AddImageAddImage) GetFilename() string { return v.Filename }

// AddImageResponse is returned by AddImage on success.
type AddImageResponse struct {
	AddImage AddImageAddImage `json:"addImage"`
}

// GetAddImage returns AddImageResponse.AddImage, and is useful for accessing the field via an interface.
func (v *AddImageResponse) GetAddImage() AddImageAddImage { return v.AddImage }

// ImagesImagesImage includes the requested fields of the GraphQL type Image.
type ImagesImagesImage struct {
	Id           int                           `json:"id"`
	Filename     string                        `json:"filename"`
	FaceDetected ImagesImagesImageFaceDetected `json:"faceDetected"`
}

// GetId returns ImagesImagesImage.Id, and is useful for accessing the field via an interface.
func (v *ImagesImagesImage) GetId() int { return v.Id }

// GetFilename returns ImagesImagesImage.Filename, and is useful for accessing the field via an interface.
func (v *ImagesImagesImage) GetFilename() string { return v.Filename }

// GetFaceDetected returns ImagesImagesImage.FaceDetected, and is useful for accessing the field via an interface.
func (v *ImagesImagesImage) GetFaceDetected() ImagesImagesImageFaceDetected { return v.FaceDetected }

// ImagesImagesImageFaceDetected includes the requested fields of the GraphQL type FaceDetected.
type ImagesImagesImageFaceDetected struct {
	FaceDetected bool `json:"faceDetected"`
}

// GetFaceDetected returns ImagesImagesImageFaceDetected.FaceDetected, and is useful for accessing the field via an interface.
func (v *ImagesImagesImageFaceDetected) GetFaceDetected() bool { return v.FaceDetected }

// ImagesResponse is returned by Images on success.
type ImagesResponse struct {
	Images []ImagesImagesImage `json:"images"`
}

// GetImages returns ImagesResponse.Images, and is useful for accessing the field via an interface.
func (v *ImagesResponse) GetImages() []ImagesImagesImage { return v.Images }

// ImagesUnprocessedImagesUnprocessedImage includes the requested fields of the GraphQL type Image.
type ImagesUnprocessedImagesUnprocessedImage struct {
	Id           int                                                 `json:"id"`
	Filename     string                                              `json:"filename"`
	FaceDetected ImagesUnprocessedImagesUnprocessedImageFaceDetected `json:"faceDetected"`
}

// GetId returns ImagesUnprocessedImagesUnprocessedImage.Id, and is useful for accessing the field via an interface.
func (v *ImagesUnprocessedImagesUnprocessedImage) GetId() int { return v.Id }

// GetFilename returns ImagesUnprocessedImagesUnprocessedImage.Filename, and is useful for accessing the field via an interface.
func (v *ImagesUnprocessedImagesUnprocessedImage) GetFilename() string { return v.Filename }

// GetFaceDetected returns ImagesUnprocessedImagesUnprocessedImage.FaceDetected, and is useful for accessing the field via an interface.
func (v *ImagesUnprocessedImagesUnprocessedImage) GetFaceDetected() ImagesUnprocessedImagesUnprocessedImageFaceDetected {
	return v.FaceDetected
}

// ImagesUnprocessedImagesUnprocessedImageFaceDetected includes the requested fields of the GraphQL type FaceDetected.
type ImagesUnprocessedImagesUnprocessedImageFaceDetected struct {
	FaceDetected bool `json:"faceDetected"`
}

// GetFaceDetected returns ImagesUnprocessedImagesUnprocessedImageFaceDetected.FaceDetected, and is useful for accessing the field via an interface.
func (v *ImagesUnprocessedImagesUnprocessedImageFaceDetected) GetFaceDetected() bool {
	return v.FaceDetected
}

// ImagesUnprocessedResponse is returned by ImagesUnprocessed on success.
type ImagesUnprocessedResponse struct {
	ImagesUnprocessed []ImagesUnprocessedImagesUnprocessedImage `json:"imagesUnprocessed"`
}

// GetImagesUnprocessed returns ImagesUnprocessedResponse.ImagesUnprocessed, and is useful for accessing the field via an interface.
func (v *ImagesUnprocessedResponse) GetImagesUnprocessed() []ImagesUnprocessedImagesUnprocessedImage {
	return v.ImagesUnprocessed
}

// __AddFaceDetectedInput is used internally by genqlient
type __AddFaceDetectedInput struct {
	ImageId      int  `json:"imageId"`
	FaceDetected bool `json:"faceDetected"`
}

// GetImageId returns __AddFaceDetectedInput.ImageId, and is useful for accessing the field via an interface.
func (v *__AddFaceDetectedInput) GetImageId() int { return v.ImageId }

// GetFaceDetected returns __AddFaceDetectedInput.FaceDetected, and is useful for accessing the field via an interface.
func (v *__AddFaceDetectedInput) GetFaceDetected() bool { return v.FaceDetected }

// __AddImageInput is used internally by genqlient
type __AddImageInput struct {
	Filename string `json:"filename"`
}

// GetFilename returns __AddImageInput.Filename, and is useful for accessing the field via an interface.
func (v *__AddImageInput) GetFilename() string { return v.Filename }

func AddFaceDetected(
	ctx context.Context,
	client graphql.Client,
	imageId int,
	faceDetected bool,
) (*AddFaceDetectedResponse, error) {
	req := &graphql.Request{
		OpName: "AddFaceDetected",
		Query: `
mutation AddFaceDetected ($imageId: Int!, $faceDetected: Boolean!) {
	addFaceDetected(imageId: $imageId, faceDetected: $faceDetected) {
		faceDetected
	}
}
`,
		Variables: &__AddFaceDetectedInput{
			ImageId:      imageId,
			FaceDetected: faceDetected,
		},
	}
	var err error

	var data AddFaceDetectedResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func AddImage(
	ctx context.Context,
	client graphql.Client,
	filename string,
) (*AddImageResponse, error) {
	req := &graphql.Request{
		OpName: "AddImage",
		Query: `
mutation AddImage ($filename: String!) {
	addImage(filename: $filename) {
		id
		filename
	}
}
`,
		Variables: &__AddImageInput{
			Filename: filename,
		},
	}
	var err error

	var data AddImageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Images(
	ctx context.Context,
	client graphql.Client,
) (*ImagesResponse, error) {
	req := &graphql.Request{
		OpName: "Images",
		Query: `
query Images {
	images {
		id
		filename
		faceDetected {
			faceDetected
		}
	}
}
`,
	}
	var err error

	var data ImagesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ImagesUnprocessed(
	ctx context.Context,
	client graphql.Client,
) (*ImagesUnprocessedResponse, error) {
	req := &graphql.Request{
		OpName: "ImagesUnprocessed",
		Query: `
query ImagesUnprocessed {
	imagesUnprocessed {
		id
		filename
		faceDetected {
			faceDetected
		}
	}
}
`,
	}
	var err error

	var data ImagesUnprocessedResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
