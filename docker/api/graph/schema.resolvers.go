package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/moritztng/perceptionOS/docker/api/graph/model"
	"github.com/moritztng/perceptionOS/docker/api/storage"
)

// AddImage is the resolver for the addImage field.
func (r *mutationResolver) AddImage(ctx context.Context, filename string) (*model.Image, error) {
	//rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	// output := &model.Image{
	//	Filename:   filename,
	//	ID:     fmt.Sprintf("T%d", rand.Int()),
	//	FaceDetected:   nil,
	//}
	image := storage.Image{Filename: filename}
	r.DB.Create(&image)
	return &model.Image{ID: int(image.ID), Filename: image.Filename}, nil
}

// AddFaceDetected is the resolver for the addFaceDetected field.
func (r *mutationResolver) AddFaceDetected(ctx context.Context, imageID int, faceDetected bool) (*model.FaceDetected, error) {
	detected := storage.FaceDetected{ImageID: imageID, FaceDetected: faceDetected}
	r.DB.Create(&detected)
	return &model.FaceDetected{FaceDetected: detected.FaceDetected}, nil
}

// Images is the resolver for the images field.
func (r *queryResolver) Images(ctx context.Context) ([]*model.Image, error) {
	result := []struct {
		ID           uint
		Filename     string
		FaceDetected *bool
	}{}
	r.DB.Model(&storage.Image{}).Select("images.id, images.filename, face_detecteds.face_detected").Joins("left join face_detecteds on images.id = face_detecteds.image_id").Scan(&result)
	output := make([]*model.Image, len(result))
	for index, image := range result {
		var faceDetected *model.FaceDetected
		if image.FaceDetected == nil {
			faceDetected = nil
		} else {
			faceDetected = &model.FaceDetected{FaceDetected: *image.FaceDetected}
		}
		output[index] = &model.Image{ID: int(image.ID), Filename: image.Filename, FaceDetected: faceDetected}
	}
	return output, nil
}

// ImagesUnprocessed is the resolver for the imagesUnprocessed field.
func (r *queryResolver) ImagesUnprocessed(ctx context.Context) ([]*model.Image, error) {
	result := []struct {
		ID           uint
		Filename     string
		FaceDetected *bool
	}{}
	r.DB.Model(&storage.Image{}).Select("images.id, images.filename, face_detecteds.face_detected").Joins("left join face_detecteds on images.id = face_detecteds.image_id").Where("face_detecteds.id is NULL").Scan(&result)
	output := make([]*model.Image, len(result))
	for index, image := range result {
		var faceDetected *model.FaceDetected
		if image.FaceDetected == nil {
			faceDetected = nil
		} else {
			faceDetected = &model.FaceDetected{FaceDetected: *image.FaceDetected}
		}
		output[index] = &model.Image{ID: int(image.ID), Filename: image.Filename, FaceDetected: faceDetected}
	}
	return output, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
