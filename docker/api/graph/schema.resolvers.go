package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/moritztng/perceptionOS/docker/api/graph/model"
)

// AddImage is the resolver for the addImage field.
func (r *mutationResolver) AddImage(ctx context.Context, filename string) (*model.Image, error) {
	image := r.DB.AddImage(filename)
	return &model.Image{ID: int(image.ID), Filename: image.Filename}, nil
}

// AddFaceDetected is the resolver for the addFaceDetected field.
func (r *mutationResolver) AddFaceDetected(ctx context.Context, imageID int, faceDetected bool) (*model.FaceDetected, error) {
	detected := r.DB.AddFaceDetected(uint(imageID), faceDetected)
	return &model.FaceDetected{FaceDetected: detected.FaceDetected}, nil
}

// Images is the resolver for the images field.
func (r *queryResolver) Images(ctx context.Context) ([]*model.Image, error) {
	images := r.DB.GetAllImages()
	output := make([]*model.Image, len(images))
	for index, image := range images {
		var detected *model.FaceDetected
		if image.FaceDetected == nil {
			detected = nil
		} else {
			detected = &model.FaceDetected{FaceDetected: image.FaceDetected.FaceDetected}
		}
		output[index] = &model.Image{ID: int(image.ID), Filename: image.Filename, FaceDetected: detected}
	}
	return output, nil
}

// ImagesUnprocessed is the resolver for the imagesUnprocessed field.
func (r *queryResolver) ImagesUnprocessed(ctx context.Context) ([]*model.Image, error) {
	images := r.DB.GetUnprocessedImages()
	output := make([]*model.Image, len(images))
	for index, image := range images {
		var detected *model.FaceDetected
		if image.FaceDetected == nil {
			detected = nil
		} else {
			detected = &model.FaceDetected{FaceDetected: image.FaceDetected.FaceDetected}
		}
		output[index] = &model.Image{ID: int(image.ID), Filename: image.Filename, FaceDetected: detected}
	}
	return output, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
