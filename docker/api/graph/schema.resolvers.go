package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/moritztng/perceptionOS/docker/api/graph/model"
)

// AddImage is the resolver for the addImage field.
func (r *mutationResolver) AddImage(ctx context.Context, filename string) (*model.Image, error) {
	image := r.DB.AddImage(filename)
	return &model.Image{ID: int(image.ID), Filename: image.Filename}, nil
}

// AddDetection is the resolver for the addDetection field.
func (r *mutationResolver) AddDetection(ctx context.Context, imageID int, person float64) (*model.Detection, error) {
	detection := r.DB.AddDetection(uint(imageID), float32(person))
	return &model.Detection{Person: float64(detection.Person)}, nil
}

// Images is the resolver for the images field.
func (r *queryResolver) Images(ctx context.Context) ([]*model.Image, error) {
	images := r.DB.GetAllImages()
	output := make([]*model.Image, len(images))
	for index, image := range images {
		var detection *model.Detection
		if image.Detection == nil {
			detection = nil
		} else {
			detection = &model.Detection{Person: float64(image.Detection.Person)}
		}
		output[index] = &model.Image{ID: int(image.ID), Filename: image.Filename, Detection: detection}
	}
	return output, nil
}

// Image is the resolver for the image field.
func (r *queryResolver) Image(ctx context.Context, imageID int) (*model.Image, error) {
	image := r.DB.GetImage(uint(imageID))
	var detection *model.Detection
	if image.Detection == nil {
		detection = nil
	} else {
		detection = &model.Detection{Person: float64(image.Detection.Person)}
	}
	output := &model.Image{ID: int(image.ID), Filename: image.Filename, Detection: detection}
	return output, nil
}

// TakeImage is the resolver for the takeImage field.
func (r *queryResolver) TakeImage(ctx context.Context) (string, error) {
	r.MessageProducer.PublishImageRequest()
	return "", nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
